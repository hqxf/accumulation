vue：饿了么高仿

1.掌握Vue.js在实战中的运用
2.学会使用Vue.js完整地开发移动端App
3.学会组件化、模块化的开发方式

工程化
组件化
模块化

移动端常用的开发技巧
	flex弹性布局
	css stickyfooter
	酷炫的交互设计

vue介绍
	旧浏览器逐渐淘汰，移动端需求增加
	前端交互越来越多，功能越来越复杂
	架构从传统后台 MVC 向 REST API+ 前端 MV* 迁移
		MV*
			MVC
			MVP
			MVVm

	MVVM框架
		View    ViewModel   Model
		视图    通讯        数据
		DOM		观察者		js对象

		针对具有复杂交互逻辑的前端应用
		提供基础的架构抽象
		通过Ajax数据持久化，保证前端用户体验
			MVVM：Angular.js、react.js、vue.js

	尤雨溪

		轻量级MVVM框架
		数据驱动+组件化的前端开发
		GIthub超过25K + 的star数,社区完善

	对比
		vue.js更轻量级,gzip后只有26k,react44k ,angular56k
		Vue.js更易上手，学习曲线平稳
		借鉴了angular指令和react组件化，自有的计算属性

	vue.js核心思想
	
		数据驱动
			DOM是数据的一种自然映射
		数据响应原理
		组件化

	组件设计原则
		页面上每个独立的可视、可交互区域视为一个组件

		每个组件对应一个工程目录，组件所需要的各种资源在这个目录下就近维护

		页面不过是组件的容器，组件可以嵌套自由组合形成完整的页面

webpack分析

外卖App上家页面-准备工作
	需求分析

目录结构
	src
		common
			js
				.js
			css
				.css
			fonts
				字体图标
		components
			header
				.vue

后台模拟数据
	mock数据

	在dev-server.js中写入代码

	var appData = require('../data.json');
	var seller = appData.seller;
	var goods = appData.goods;
	var ratings = appData.rantings;
	var apiRoutes = express.Router();
	apiRoutes.get("/seller",function(req,res){
		res.json({
			errno:0,
			data:seller
		})
	})
	apiRoutes.get("/goods",function(req,res){
		res.json({
			errno:0,
			data:goods
		})
	})
	apiRoutes.get("/ratings",function(req,res){
		res.json({
			errno:0,
			data:ratings
		})
	})
	app.use('./api',apiRoutes);


	//post请求修改配置文件
	apiRoutes.post('/seller',function(req,res){
	    res.send({
	        appData
		});
	});


eslintrc.js
	'semi':['error','always'] //分号报错 import 后面要加分号
	'index': 0;  //缩进

webpack-base.config.js 配置去掉相对路径的  eg "vue"

npm install 
	i --> install
	-S --> --save
	-D --> --save-dev

父元素display:flex
	子元素flex:1
vue-loader
	下面的postcss插件


css 书写规范
	1.影响布局
	2.不能继承的，宽高等
	3.能被继承，

草料二维码(localhost换成ip ipconfig查看，转成二维码，手机扫描)

移动端1px问题  dpr物理像素
	@media (-webkit-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5){
		.border-1px{
			position: relative;
		}
		.border-1px:after{
			position: absolute;
			bottom: 0;
			left: 0;
			width: 100%;
			border-top: 1px solid #ccc;
			content: "";
			-webkit-transform: scaleY(0.7);
			transform: scaleY(0.7);
		}
	}
	@media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2){
		.border-1px{
			position: relative;
		}
		.border-1px:after{
			position: absolute;
			bottom: 0;
			left: 0;
			width: 100%;
			border-top: 1px solid #ccc;
			content: "";
			-webkit-transform: scaleY(0.5);
			transform: scaleY(0.5);
		}
	}


异步请求数据 渲染时候可能会报错
	加上 v-if="请求过来的数据"  即可消去报错

两个inline-block盒子有缝隙  给父元素加上fong-size:0;
	这时候子元素的字体消失，因为字体继承父元素大小为0；再给子元素定义字体大小

字体图标居中
	要vertical-align属性

谷歌最小字体12px

文字超出省略号
	white-space: nowrap;
	overflow:hidden;
	text-overflow: ellipsis;

css Sticky footers   http://www.w3cplus.com

	<div class="detail" v-show="detailShow">
		<div class="detail-wrapper clearfix">
			<div class="detail-main"></div>
		</div>
		<div class="detail-close">
			<i class="icon-close"></i>
		</div>
	</div>

.detail{
	position: fixed;
	top: 0;
	left: 0;
	z-index: 100;
	width: 100%;
	height: 100%;
	overflow: auto;
	background: rgba(7,17,27,0.8);
	.detail-wrapper{
		min-height: 100%;
			.detail-main{
			margin-top: 64px;
			padding-bottom: 64px;
		}
	}
	.detail-close{
		position: relative;
		width: 32px;
		height: 32px;
		margin: -64px auto;
		clear: both;
		font-size: 32px;
		.icon-close{

		}
	}
}